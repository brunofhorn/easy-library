// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Reader {
  id           String        @id @default(cuid())
  name         String
  username     String
  password     String
  email        String        @unique
  birthDate    String
  transactions Transaction[]
}

model Item {
  id                  String            @id @default(cuid())
  title               String
  synopsis            String
  publishingCompanyId String
  publicationYear     String
  numberPages         String
  itemTypeId          String
  coverImage          String
  authors             Author[]
  transactions        Transaction[]
  itemType            ItemType          @relation(fields: [itemTypeId], references: [id])
  publishingCompany   PublishingCompany @relation(fields: [publishingCompanyId], references: [id])
}

model Author {
  id          String  @id @default(cuid())
  name        String
  avatar      String?
  nationality String
  items       Item[]
}

model PublishingCompany {
  id    String @id @default(cuid())
  name  String
  items Item[]
}

model ItemType {
  id          String @id @default(cuid())
  description String
  items       Item[]
}

model Transaction {
  id                String          @id @default(cuid())
  transactionTypeId String
  date              DateTime
  borrowerId        String
  itemId            String
  returnDate        DateTime?
  item              Item            @relation(fields: [itemId], references: [id])
  borrower          Reader          @relation(fields: [borrowerId], references: [id])
  transactionType   TransactionType @relation(fields: [transactionTypeId], references: [id])
}

model TransactionType {
  id           String        @id @default(cuid())
  description  String
  transactions Transaction[]
}

model ActionLog {
  id      String @id @default(cuid())
  entries String
}
